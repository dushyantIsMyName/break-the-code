Check Permutation
Send Feedback
For a given two strings, 'str1' and 'str2', check whether they are a permutation of each other or not.
Permutations of each other
Two strings are said to be a permutation of each other when either of the string's characters can be rearranged so that it becomes identical to the other one.

Example: 
str1= "sinrtg" 
str2 = "string"

The character of the first string(str1) can be rearranged to form str2 and hence we can say that the given strings are a permutation of each other.
Input Format:
The first line of input contains a string without any leading and trailing spaces, representing the first string 'str1'.

The second line of input contains a string without any leading and trailing spaces, representing the second string 'str2'.
Note:
All the characters in the input strings would be in lower case.
Output Format:
The only line of output prints either 'true' or 'false', denoting whether the two strings are a permutation of each other or not.

You are not required to print anything. It has already been taken care of. Just implement the function. 
Constraints:
0 <= N <= 10^6
Where N is the length of the input string.

Time Limit: 1 second
Sample Input 1:
abcde
baedc
Sample Output 1:
true
Sample Input 2:
abc
cbd
Sample Output 2:
false

Code:

bool isPermutation(char arr1[], char arr2[])
{
    int i,j,c,a,b;
    int n1=strlen(arr1),n2=strlen(arr2);
    if(n1==n2){
    	for(i=0;i<n1;i++){
        	a=arr1[i];
        	for(j=0;j<n2;j++){
            	b=arr2[j];
            	if(a==b){
                	for(c=j;c<n2;c++){
                    	arr2[c]=arr2[c+1];
                    }
           	 	}
        	}
    	}
    	if(arr2[0]=='\0'){
        	return 1;
    	}
        else{
            return 0;
        }       
    }
    else{
        return 0;
    }
}
/*#include <bits/stdc++.h>
using namespace std;
bool isPermutation(string str1, string str2)
*/
/*{
	int n1 = str1.length();
	int n2 = str2.length();
	if (n1 != n2)
	return false;
	sort(str1.begin(), str1.end());
	sort(str2.begin(), str2.end());
	for (int i = 0; i < n1; i++)
	if (str1[i] != str2[i])
		return false;
	return true;
}*/

/*bool isPermutation(char arr1[], char arr2[])
{
    int i,j,c,a,b;
    int n1=strlen(arr1),n2=strlen(arr2);
    if(n1!=n2){
        return 0;
    }
    sort(arr1.begin(), arr1.end());
    sort(arr2.begin(), arr2.end());
    for (int i = 0; i < n1;  i++){
       if (arr1[i] != arr2[i]){
         return 0; 
       }
    }
    return 1;
}*/

/*
for(i=0;i<n1;i++){
        a=arr1[i];
        for(j=0;j<n2;j++){
            b=arr2[j];
            if(a==b){
                for(c=j;c<n2;c++){
                    arr2[c]=arr2[c+1];
                }
            }
        }
    }
    if(arr2[0]=='\0'){
        return 1;
    }
    else{
        return 0;
    }
    */
